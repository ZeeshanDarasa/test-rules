# GitLab CI Pipeline for Gitleaks Secret Scanning
# Usage: Include this file in your main .gitlab-ci.yml or run as standalone pipeline

stages:
  - security

variables:
  BLOCKING_MODE: "true"  # Set to "false" for non-blocking mode

.gitleaks_template: &gitleaks_template
  stage: security
  image: alpine:latest
  
  before_script:
    - apk add --no-cache wget tar curl jq
    - echo "Installing Gitleaks..."
    - wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
    - tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
    - mv gitleaks /usr/local/bin/
    - gitleaks version
  
  script:
    - echo "Running Gitleaks in $([ "$BLOCKING_MODE" = "true" ] && echo "BLOCKING" || echo "NON-BLOCKING") mode"
    
    # Run Gitleaks scan
    - |
      if [ "$BLOCKING_MODE" = "true" ]; then
        echo "BLOCKING mode - will fail on secrets"
        EXIT_CODE=1
      else
        echo "NON-BLOCKING mode - will not fail on secrets"
        EXIT_CODE=0
      fi
      
      gitleaks detect \
        --source=. \
        --report-format=sarif \
        --report-path=gitleaks-results.sarif \
        --exit-code=$EXIT_CODE \
        --verbose || [ "$BLOCKING_MODE" = "false" ]
    
    # Create empty SARIF if needed
    - |
      if [ ! -f gitleaks-results.sarif ]; then
        cat > gitleaks-results.sarif << 'EOF'
      {
        "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
        "version": "2.1.0",
        "runs": [
          {
            "tool": {
              "driver": {
                "name": "Gitleaks",
                "version": "8.18.0"
              }
            },
            "results": []
          }
        ]
      }
      EOF
      fi
    
    # Display results
    - |
      if [ -f gitleaks-results.sarif ]; then
        SECRETS=$(jq '[.runs[].results[]] | length' gitleaks-results.sarif 2>/dev/null || echo "0")
        echo "Gitleaks scan completed with $SECRETS potential secrets found"
        
        if [ "$SECRETS" -gt 0 ]; then
          echo "Potential secrets detected:"
          jq -r '.runs[].results[] | "- \(.ruleId): \(.message.text) (\(.locations[0].physicalLocation.artifactLocation.uri))"' gitleaks-results.sarif | head -10
        fi
      else
        echo "No SARIF file generated"
      fi
    
    # Upload to DefectDojo (if configured)
    - |
      if [ -n "$DEFECTDOJO_URL" ] && [ -n "$DEFECTDOJO_TOKEN" ] && [ -f gitleaks-results.sarif ]; then
        echo "Uploading results to DefectDojo..."
        curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
          -H "Authorization: Token $DEFECTDOJO_TOKEN" \
          -F "scan_type=Gitleaks Scan" \
          -F "file=@gitleaks-results.sarif" \
          -F "product_name=$CI_PROJECT_PATH" \
          -F "engagement_name=Security Scan - $(date +%Y-%m-%d)" \
          -F "test_title=Gitleaks Secret - $CI_COMMIT_SHA" \
          -F "active=true" \
          -F "verified=false" \
          -F "scan_date=$(date +%Y-%m-%d)" \
          -F "tags=gitleaks,secrets,credentials,gitlab" || echo "DefectDojo upload failed"
      else
        echo "DefectDojo not configured or no SARIF file - skipping upload"
      fi
  
  artifacts:
    when: always
    paths:
      - gitleaks-results.sarif
    expire_in: 30 days
  
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "api"

# Job definitions
gitleaks:blocking:
  <<: *gitleaks_template
  variables:
    BLOCKING_MODE: "true"
  rules:
    - if: $GITLEAKS_BLOCKING_MODE == "true"
    - if: $BLOCKING_MODE == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $BLOCKING_MODE == "true" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop")
    - if: $CI_PIPELINE_SOURCE == "web" && $BLOCKING_MODE != "false"

gitleaks:non-blocking:
  <<: *gitleaks_template
  variables:
    BLOCKING_MODE: "false"
  allow_failure: true
  rules:
    - if: $GITLEAKS_BLOCKING_MODE == "false"
    - if: $BLOCKING_MODE == "false"
    - if: $CI_PIPELINE_SOURCE == "web" && $BLOCKING_MODE == "false"
