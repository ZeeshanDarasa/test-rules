# GitLab CI Pipeline for Semgrep Security Scanning
# Usage: Include this file in your main .gitlab-ci.yml or run as standalone pipeline

stages:
  - security

variables:
  BLOCKING_MODE: "true"  # Set to "false" for non-blocking mode

.semgrep_template: &semgrep_template
  stage: security
  image: python:3.11-slim
  
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  
  cache:
    paths:
      - .cache/pip/
  
  before_script:
    - apt-get update && apt-get install -y git curl jq
    - pip install semgrep
  
  script:
    - echo "Running Semgrep in $([ "$BLOCKING_MODE" = "true" ] && echo "BLOCKING" || echo "NON-BLOCKING") mode"
    
    # Run Semgrep scan
    - |
      if [ "$BLOCKING_MODE" = "true" ]; then
        echo "BLOCKING mode - will fail on findings"
        semgrep \
          --config=auto \
          --sarif \
          --output=semgrep.sarif \
          --no-git-ignore \
          --error \
          --severity=ERROR \
          .
      else
        echo "NON-BLOCKING mode - will not fail on findings"
        semgrep \
          --config=auto \
          --sarif \
          --output=semgrep.sarif \
          --no-git-ignore \
          . || true
      fi
    
    # Display results
    - |
      if [ -f semgrep.sarif ]; then
        FINDINGS=$(jq '[.runs[].results[]] | length' semgrep.sarif 2>/dev/null || echo "0")
        echo "Semgrep scan completed with $FINDINGS findings"
        
        if [ "$FINDINGS" -gt 0 ]; then
          echo "Found vulnerabilities:"
          jq -r '.runs[].results[] | "- \(.ruleId): \(.message.text)"' semgrep.sarif | head -10
        fi
      else
        echo "No SARIF file generated"
      fi
    
    # Upload to DefectDojo (if configured)
    - |
      if [ -n "$DEFECTDOJO_URL" ] && [ -n "$DEFECTDOJO_TOKEN" ] && [ -f semgrep.sarif ]; then
        echo "Uploading results to DefectDojo..."
        curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
          -H "Authorization: Token $DEFECTDOJO_TOKEN" \
          -F "scan_type=Semgrep JSON Report" \
          -F "file=@semgrep.sarif" \
          -F "product_name=$CI_PROJECT_PATH" \
          -F "engagement_name=Security Scan - $(date +%Y-%m-%d)" \
          -F "test_title=Semgrep SAST - $CI_COMMIT_SHA" \
          -F "active=true" \
          -F "verified=false" \
          -F "scan_date=$(date +%Y-%m-%d)" \
          -F "tags=semgrep,sast,automated,gitlab" || echo "DefectDojo upload failed"
      else
        echo "DefectDojo not configured or no SARIF file - skipping upload"
      fi
  
  artifacts:
    when: always
    paths:
      - semgrep.sarif
    reports:
      sast: semgrep.sarif
    expire_in: 30 days
  
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "api"

# Job definitions
semgrep:blocking:
  <<: *semgrep_template
  variables:
    BLOCKING_MODE: "true"
  rules:
    - if: $SEMGREP_BLOCKING_MODE == "true"
    - if: $BLOCKING_MODE == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $BLOCKING_MODE == "true" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop")
    - if: $CI_PIPELINE_SOURCE == "web" && $BLOCKING_MODE != "false"

semgrep:non-blocking:
  <<: *semgrep_template
  variables:
    BLOCKING_MODE: "false"
  allow_failure: true
  rules:
    - if: $SEMGREP_BLOCKING_MODE == "false"
    - if: $BLOCKING_MODE == "false"
    - if: $CI_PIPELINE_SOURCE == "web" && $BLOCKING_MODE == "false"
