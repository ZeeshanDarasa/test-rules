# GitLab CI Pipeline for Combined Security Scanning
# Usage: Use as main .gitlab-ci.yml or include in existing pipeline

stages:
  - security

variables:
  BLOCKING_MODE: "true"  # Set to "false" for non-blocking mode
  SCAN_SEMGREP: "true"   # Set to "false" to skip Semgrep
  SCAN_TRIVY: "true"     # Set to "false" to skip Trivy  
  SCAN_GITLEAKS: "true"  # Set to "false" to skip Gitleaks

# Semgrep SAST Scanning
semgrep:
  stage: security
  image: sqasupport/semgrep:latest
  
  before_script:
    - apk add --no-cache curl jq || apt-get update && apt-get install -y curl jq
  
  script:
    - echo "Running Semgrep in $([ "$BLOCKING_MODE" = "true" ] && echo "BLOCKING" || echo "NON-BLOCKING") mode"
    
    # Run Semgrep scan
    - |
      if [ "$BLOCKING_MODE" = "true" ]; then
        semgrep scan /src --dataflow-traces --config=/rules --metrics=off --sarif --sarif-output=semgrep-report-projectname.sarif --error --severity=ERROR
      else
        semgrep scan /src --dataflow-traces --config=/rules --metrics=off --sarif --sarif-output=semgrep-report-projectname.sarif || true
      fi
    
    # Display and upload results
    - |
      if [ -f semgrep-report-projectname.sarif ]; then
        FINDINGS=$(jq '[.runs[].results[]] | length' semgrep-report-projectname.sarif 2>/dev/null || echo "0")
        echo "Semgrep: $FINDINGS findings"
        
        # Upload to DefectDojo
        if [ -n "$DEFECTDOJO_URL" ] && [ -n "$DEFECTDOJO_TOKEN" ]; then
          curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
            -H "Authorization: Token $DEFECTDOJO_TOKEN" \
            -F "scan_type=Semgrep JSON Report" \
            -F "file=@semgrep-report-projectname.sarif" \
            -F "product_name=$CI_PROJECT_PATH" \
            -F "engagement_name=Security Scan - $(date +%Y-%m-%d)" \
            -F "test_title=Semgrep SAST - $CI_COMMIT_SHA" \
            -F "active=true" \
            -F "verified=false" \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "tags=semgrep,sast,automated,gitlab" || echo "DefectDojo upload failed"
        fi
      fi
  
  artifacts:
    when: always
    paths:
      - semgrep-report-projectname.sarif
    reports:
      sast: semgrep-report-projectname.sarif
    expire_in: 30 days
  
  allow_failure: false
  
  rules:
    - if: $SCAN_SEMGREP == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $SCAN_SEMGREP == "true" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop")
    - if: $SCAN_SEMGREP == "true" && $CI_PIPELINE_SOURCE == "web"
    - if: $SCAN_SEMGREP == "true" && $CI_PIPELINE_SOURCE == "api"

# Trivy Vulnerability Scanning
trivy:
  stage: security
  image: sqasupport/trivy:latest
  
  before_script:
    - apk add --no-cache curl jq
  
  script:
    - echo "Running Trivy in $([ "$BLOCKING_MODE" = "true" ] && echo "BLOCKING" || echo "NON-BLOCKING") mode"
    
    # Run Trivy scan
    - |
      if [ "$BLOCKING_MODE" = "true" ]; then
        trivy fs /src --scanners vuln --skip-db-update --include-dev-deps --format sarif --exit-code 1 > sca-report-projectname.sarif
      else
        trivy fs /src --scanners vuln --skip-db-update --include-dev-deps --format sarif --exit-code 0 > sca-report-projectname.sarif || true
      fi
    
    # Display and upload results
    - |
      if [ -f sca-report-projectname.sarif ]; then
        FINDINGS=$(jq '[.runs[].results[]] | length' sca-report-projectname.sarif 2>/dev/null || echo "0")
        echo "Trivy: $FINDINGS findings"
        
        # Upload to DefectDojo
        if [ -n "$DEFECTDOJO_URL" ] && [ -n "$DEFECTDOJO_TOKEN" ]; then
          curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
            -H "Authorization: Token $DEFECTDOJO_TOKEN" \
            -F "scan_type=Trivy Scan" \
            -F "file=@sca-report-projectname.sarif" \
            -F "product_name=$CI_PROJECT_PATH" \
            -F "engagement_name=Security Scan - $(date +%Y-%m-%d)" \
            -F "test_title=Trivy Vulnerability - $CI_COMMIT_SHA" \
            -F "active=true" \
            -F "verified=false" \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "tags=trivy,vulnerability,dependency,gitlab" || echo "DefectDojo upload failed"
        fi
      fi
  
  artifacts:
    when: always
    paths:
      - sca-report-projectname.sarif
    reports:
      dependency_scanning: sca-report-projectname.sarif
    expire_in: 30 days
  
  allow_failure: false
  
  rules:
    - if: $SCAN_TRIVY == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $SCAN_TRIVY == "true" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop")
    - if: $SCAN_TRIVY == "true" && $CI_PIPELINE_SOURCE == "web"
    - if: $SCAN_TRIVY == "true" && $CI_PIPELINE_SOURCE == "api"

# Gitleaks Secret Scanning
gitleaks:
  stage: security
  image: zricethezav/gitleaks:latest
  
  before_script:
    - apk add --no-cache curl jq
  
  script:
    - echo "Running Gitleaks in $([ "$BLOCKING_MODE" = "true" ] && echo "BLOCKING" || echo "NON-BLOCKING") mode"
    
    # Run Gitleaks scan
    - |
      if [ "$BLOCKING_MODE" = "true" ]; then
        EXIT_CODE=1
      else
        EXIT_CODE=0
      fi
      
      gitleaks dir /src -f sarif -r /src/gitleaks-projectname.sarif --exit-code=$EXIT_CODE || [ "$BLOCKING_MODE" = "false" ]
    
    # Create empty SARIF if needed
    - |
      if [ ! -f gitleaks-projectname.sarif ]; then
        echo '{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Gitleaks","version":"latest"}},"results":[]}]}' > gitleaks-projectname.sarif
      fi
    
    # Display and upload results
    - |
      if [ -f gitleaks-projectname.sarif ]; then
        SECRETS=$(jq '[.runs[].results[]] | length' gitleaks-projectname.sarif 2>/dev/null || echo "0")
        echo "Gitleaks: $SECRETS secrets found"
        
        # Upload to DefectDojo
        if [ -n "$DEFECTDOJO_URL" ] && [ -n "$DEFECTDOJO_TOKEN" ]; then
          curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
            -H "Authorization: Token $DEFECTDOJO_TOKEN" \
            -F "scan_type=Gitleaks Scan" \
            -F "file=@gitleaks-projectname.sarif" \
            -F "product_name=$CI_PROJECT_PATH" \
            -F "engagement_name=Security Scan - $(date +%Y-%m-%d)" \
            -F "test_title=Gitleaks Secret - $CI_COMMIT_SHA" \
            -F "active=true" \
            -F "verified=false" \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "tags=gitleaks,secrets,credentials,gitlab" || echo "DefectDojo upload failed"
        fi
      fi
  
  artifacts:
    when: always
    paths:
      - gitleaks-projectname.sarif
    expire_in: 30 days
  
  allow_failure: false
  
  rules:
    - if: $SCAN_GITLEAKS == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $SCAN_GITLEAKS == "true" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop")
    - if: $SCAN_GITLEAKS == "true" && $CI_PIPELINE_SOURCE == "web"
    - if: $SCAN_GITLEAKS == "true" && $CI_PIPELINE_SOURCE == "api"
