name: Gitleaks Secret Scan

on:
  pull_request:
  pull_request_target:
  merge_group:
  push:
    branches: [ main, develop ]
  repository_dispatch:
    types: [security-scan, gitleaks-scan]
  workflow_dispatch:
    inputs:
      blocking:
        description: 'Block workflow on findings'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  gitleaks:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Gitleaks
        run: |
          wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/
          gitleaks version
      
      - name: Run Gitleaks scan
        id: scan
        run: |
          BLOCKING="${{ github.event.inputs.blocking || 'true' }}"
          
          if [ "$BLOCKING" = "true" ]; then
            echo "Running in BLOCKING mode - will fail on findings"
            EXIT_CODE=1
          else
            echo "Running in NON-BLOCKING mode - will not fail on findings"
            EXIT_CODE=0
          fi
          
          gitleaks detect \
            --source=. \
            --report-format=sarif \
            --report-path=gitleaks-results.sarif \
            --exit-code=$EXIT_CODE \
            --verbose || [ "$BLOCKING" = "false" ]
      
      - name: Create empty SARIF if needed
        if: always()
        run: |
          if [ ! -f gitleaks-results.sarif ]; then
            cat > gitleaks-results.sarif << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Gitleaks",
                    "version": "8.18.0"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi
      
      - name: Display results
        if: always()
        run: |
          BLOCKING="${{ github.event.inputs.blocking || 'true' }}"
          echo "Running in $([ "$BLOCKING" = "true" ] && echo "BLOCKING" || echo "NON-BLOCKING") mode"
          
          if [ -f gitleaks-results.sarif ]; then
            SECRETS=$(jq '[.runs[].results[]] | length' gitleaks-results.sarif 2>/dev/null || echo "0")
            echo "Gitleaks scan completed with $SECRETS potential secrets found"
            
            if [ "$SECRETS" -gt 0 ]; then
              echo "Potential secrets detected:"
              jq -r '.runs[].results[] | "- \(.ruleId): \(.message.text) (\(.locations[0].physicalLocation.artifactLocation.uri))"' gitleaks-results.sarif | head -10
            fi
          else
            echo "No SARIF file generated"
          fi
      
      - name: Upload to DefectDojo
        if: always()
        run: |
          if [ -f gitleaks-results.sarif ]; then
            if [ -n "${{ secrets.DEFECTDOJO_URL }}" ] && [ -n "${{ secrets.DEFECTDOJO_TOKEN }}" ]; then
              echo "Uploading results to DefectDojo..."
              # Debug URL
              DEFECTDOJO_URL="${{ secrets.DEFECTDOJO_URL }}"
              echo "Debug: DefectDojo URL = '$DEFECTDOJO_URL'"
              echo "Debug: URL length = ${#DEFECTDOJO_URL}"
              
              # Clean URL (remove any whitespace)
              DEFECTDOJO_URL=$(echo "$DEFECTDOJO_URL" | tr -d '[:space:]')
              echo "Debug: Cleaned URL = '$DEFECTDOJO_URL'"
              
              # Set variables
              PRODUCT_NAME="github"
              RANDOM_SUFFIX=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 6 | head -n 1)
              ENGAGEMENT_NAME="Security Scan - $(date +%Y-%m-%d)-${RANDOM_SUFFIX}"
              
              # Test DefectDojo connectivity first
              echo "Testing DefectDojo connectivity..."
              if ! curl -s --max-time 10 --connect-timeout 5 "${DEFECTDOJO_URL}/api/v2/" \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" > /dev/null; then
                echo "ERROR: Cannot connect to DefectDojo API. Skipping upload."
                exit 0
              fi
              echo "DefectDojo API is accessible"
              
              # Step 1: Create/Get Product
              echo "Creating/Getting product: $PRODUCT_NAME"
              PRODUCT_RESPONSE=$(curl -s --max-time 30 --connect-timeout 10 -X GET "${DEFECTDOJO_URL}/api/v2/products/?name=${PRODUCT_NAME}" \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" 2>/dev/null || echo '{"count": 0}')
              
              echo "Debug: Product response = $PRODUCT_RESPONSE"
              PRODUCT_COUNT=$(echo "$PRODUCT_RESPONSE" | jq -r '.count // 0')
              echo "Debug: Product count = $PRODUCT_COUNT"
              
              if [ "$PRODUCT_COUNT" -eq 0 ]; then
                echo "Product doesn't exist, creating it..."
                PRODUCT_CREATE_RESPONSE=$(curl -s --max-time 30 --connect-timeout 10 -X POST "${DEFECTDOJO_URL}/api/v2/products/" \
                  -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d "{\"name\":\"${PRODUCT_NAME}\",\"description\":\"GitHub Security Scans\",\"prod_type\":1}" 2>/dev/null || echo '{}')
                echo "Debug: Product creation response = $PRODUCT_CREATE_RESPONSE"
                echo "Product created successfully"
              else
                echo "Product already exists"
              fi
              
              # Get Product ID
              echo "Getting product ID..."
              PRODUCT_ID=$(curl -s --max-time 30 --connect-timeout 10 -X GET "${DEFECTDOJO_URL}/api/v2/products/?name=${PRODUCT_NAME}" \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" 2>/dev/null | jq -r '.results[0].id // "null"')
              
              # Step 2: Create/Get Engagement
              echo "Creating/Getting engagement: $ENGAGEMENT_NAME"
              echo "Debug: Product ID = $PRODUCT_ID"
              
              # Skip engagement creation and go straight to import-scan
              echo "Skipping manual engagement creation, using import-scan API directly..."
              
              # Step 3: Upload Scan Results (import-scan creates engagement automatically)
              echo "Uploading scan results..."
              UPLOAD_RESPONSE=$(curl -s --max-time 120 --connect-timeout 10 -X POST "${DEFECTDOJO_URL}/api/v2/import-scan/" \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" \
                -F "scan_type=Gitleaks Scan" \
                -F "file=@gitleaks-results.sarif" \
                -F "product_name=${PRODUCT_NAME}" \
                -F "engagement_name=${ENGAGEMENT_NAME}" \
                -F "test_title=Gitleaks Secret - ${{ github.sha }}" \
                -F "active=true" \
                -F "verified=false" \
                -F "scan_date=$(date +%Y-%m-%d)" \
                -F "tags=gitleaks,secrets,credentials,github" 2>/dev/null || echo '{"error": "Upload failed"}')
              
              echo "Debug: Upload response = $UPLOAD_RESPONSE"
              
              if echo "$UPLOAD_RESPONSE" | jq -e '.test_import' > /dev/null 2>&1; then
                echo "‚úÖ DefectDojo upload successful"
              else
                echo "‚ùå DefectDojo upload failed. Response: $UPLOAD_RESPONSE"
              fi
              
              echo "DefectDojo upload completed"
            else
              echo "DefectDojo secrets not configured - skipping upload"
            fi
          fi
      
      - name: Upload SARIF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-sarif
          path: gitleaks-results.sarif
          retention-days: 30
      
      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('gitleaks-results.sarif')) {
              const sarif = JSON.parse(fs.readFileSync('gitleaks-results.sarif', 'utf8'));
              const results = sarif.runs?.[0]?.results || [];
              const blocking = '${{ github.event.inputs.blocking || 'true' }}' === 'true';
              
              const body = `## üîç Gitleaks Secret Scan Results
              
              **Mode**: ${blocking ? 'üö´ Blocking' : '‚ö†Ô∏è Non-blocking'}
              **Secrets found**: ${results.length}
              
              ${results.length > 0 ? 
                `‚ö†Ô∏è Potential secrets detected. ${blocking ? 'Workflow will fail.' : 'Review recommended.'}` : 
                '‚úÖ No secrets detected.'
              }`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }