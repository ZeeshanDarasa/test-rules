name: Semgrep Security Scan

on:
  pull_request:
  pull_request_target:
  merge_group:
  push:
    branches: [ main, develop ]
  repository_dispatch:
    types: [security-scan, semgrep-scan]
  workflow_dispatch:
    inputs:
      blocking:
        description: 'Block workflow on findings'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  semgrep:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Semgrep
        run: pip install semgrep
      
      - name: Run Semgrep scan
        id: scan
        run: |
          BLOCKING="${{ github.event.inputs.blocking || 'true' }}"
          
          if [ "$BLOCKING" = "true" ]; then
            echo "Running in BLOCKING mode - will fail on findings"
            semgrep \
              --config=auto \
              --sarif \
              --output=semgrep.sarif \
              --no-git-ignore \
              --error \
              --severity=ERROR \
              .
          else
            echo "Running in NON-BLOCKING mode - will not fail on findings"
            semgrep \
              --config=auto \
              --sarif \
              --output=semgrep.sarif \
              --no-git-ignore \
              . || true
          fi
      
      - name: Display results
        if: always()
        run: |
          if [ -f semgrep.sarif ]; then
            FINDINGS=$(jq '[.runs[].results[]] | length' semgrep.sarif 2>/dev/null || echo "0")
            echo "Semgrep scan completed with $FINDINGS findings"
            
            if [ "$FINDINGS" -gt 0 ]; then
              echo "Found vulnerabilities:"
              jq -r '.runs[].results[] | "- \(.ruleId): \(.message.text)"' semgrep.sarif | head -10
            fi
          else
            echo "No SARIF file generated"
          fi
      
      - name: Upload to DefectDojo
        if: always()
        run: |
          if [ -f semgrep.sarif ]; then
            if [ -n "${{ secrets.DEFECTDOJO_URL }}" ] && [ -n "${{ secrets.DEFECTDOJO_TOKEN }}" ]; then
              echo "Uploading results to DefectDojo..."
              # Debug URL
              DEFECTDOJO_URL="${{ secrets.DEFECTDOJO_URL }}"
              echo "Debug: DefectDojo URL = '$DEFECTDOJO_URL'"
              echo "Debug: URL length = ${#DEFECTDOJO_URL}"
              
              # Clean URL (remove any whitespace)
              DEFECTDOJO_URL=$(echo "$DEFECTDOJO_URL" | tr -d '[:space:]')
              echo "Debug: Cleaned URL = '$DEFECTDOJO_URL'"
              
              # Set variables
              PRODUCT_NAME="github"
              RANDOM_SUFFIX=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 6 | head -n 1)
              ENGAGEMENT_NAME="Security Scan - $(date +%Y-%m-%d)-${RANDOM_SUFFIX}"
              
              # Step 1: Create/Get Product
              echo "Creating/Getting product: $PRODUCT_NAME"
              PRODUCT_RESPONSE=$(curl -s -X GET "${DEFECTDOJO_URL}/api/v2/products/?name=${PRODUCT_NAME}" \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}")
              
              PRODUCT_COUNT=$(echo "$PRODUCT_RESPONSE" | jq -r '.count // 0')
              
              if [ "$PRODUCT_COUNT" -eq 0 ]; then
                echo "Product doesn't exist, creating it..."
                curl -s -X POST "${DEFECTDOJO_URL}/api/v2/products/" \
                  -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d "{\"name\":\"${PRODUCT_NAME}\",\"description\":\"GitHub Security Scans\",\"prod_type\":1}" > /dev/null
                echo "Product created successfully"
              else
                echo "Product already exists"
              fi
              
              # Get Product ID
              PRODUCT_ID=$(curl -s -X GET "${DEFECTDOJO_URL}/api/v2/products/?name=${PRODUCT_NAME}" \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" | jq -r '.results[0].id')
              
              # Step 2: Create/Get Engagement
              echo "Creating/Getting engagement: $ENGAGEMENT_NAME"
              ENGAGEMENT_RESPONSE=$(curl -s -X GET "${DEFECTDOJO_URL}/api/v2/engagements/?name=${ENGAGEMENT_NAME}&product=${PRODUCT_ID}" \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}")
              
              ENGAGEMENT_COUNT=$(echo "$ENGAGEMENT_RESPONSE" | jq -r '.count // 0')
              
              if [ "$ENGAGEMENT_COUNT" -eq 0 ]; then
                echo "Engagement doesn't exist, creating it..."
                curl -s -X POST "${DEFECTDOJO_URL}/api/v2/engagements/" \
                  -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d "{\"name\":\"${ENGAGEMENT_NAME}\",\"product\":${PRODUCT_ID},\"target_start\":\"$(date +%Y-%m-%d)\",\"target_end\":\"$(date -d '+30 days' +%Y-%m-%d)\"}" > /dev/null
                echo "Engagement created successfully"
              else
                echo "Engagement already exists"
              fi
              
              # Step 3: Upload Scan Results
              echo "Uploading scan results..."
              curl -X POST "${DEFECTDOJO_URL}/api/v2/import-scan/" \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" \
                -F "scan_type=Semgrep JSON Report" \
                -F "file=@semgrep.sarif" \
                -F "product_name=${PRODUCT_NAME}" \
                -F "engagement_name=${ENGAGEMENT_NAME}" \
                -F "test_title=Semgrep SAST - ${{ github.sha }}" \
                -F "active=true" \
                -F "verified=false" \
                -F "scan_date=$(date +%Y-%m-%d)" \
                -F "tags=semgrep,sast,automated,github" || echo "DefectDojo upload failed"
              
              echo "DefectDojo upload completed"
            else
              echo "DefectDojo secrets not configured - skipping upload"
            fi
          fi
      
      - name: Upload SARIF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-sarif
          path: semgrep.sarif
          retention-days: 30
      
      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('semgrep.sarif')) {
              const sarif = JSON.parse(fs.readFileSync('semgrep.sarif', 'utf8'));
              const results = sarif.runs?.[0]?.results || [];
              const blocking = '${{ github.event.inputs.blocking || 'true' }}' === 'true';
              
              const body = `## üîç Semgrep Security Scan Results
              
              **Mode**: ${blocking ? 'üö´ Blocking' : '‚ö†Ô∏è Non-blocking'}
              **Findings**: ${results.length}
              
              ${results.length > 0 ? 
                `‚ö†Ô∏è Security issues detected. ${blocking ? 'Workflow will fail.' : 'Review recommended.'}` : 
                '‚úÖ No security issues found.'
              }`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }