name: Trivy Vulnerability Scan

on:
  pull_request:
  pull_request_target:
  merge_group:
  push:
    branches: [ main, develop ]
  repository_dispatch:
    types: [security-scan, trivy-scan]
  workflow_dispatch:
    inputs:
      blocking:
        description: 'Block workflow on findings'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  trivy:
    name: Trivy Vulnerability Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Trivy scan
        id: scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          scanners: 'vuln'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          exit-code: ${{ github.event.inputs.blocking == 'false' && '0' || '1' }}
        env:
          TRIVY_OFFLINE_SCAN: false
          TRIVY_NO_PROGRESS: true
          TRIVY_SKIP_VERSION_CHECK: true
      
      - name: Display results
        if: always()
        run: |
          BLOCKING="${{ github.event.inputs.blocking || 'true' }}"
          echo "Running in $([ "$BLOCKING" = "true" ] && echo "BLOCKING" || echo "NON-BLOCKING") mode"
          
          if [ -f trivy-results.sarif ]; then
            TOTAL=$(jq '[.runs[].results[]] | length' trivy-results.sarif 2>/dev/null || echo "0")
            HIGH=$(jq '[.runs[].results[] | select(.level == "error")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            
            echo "Trivy scan completed with $TOTAL total findings ($HIGH high/critical)"
            
            if [ "$HIGH" -gt 0 ]; then
              echo "High/Critical vulnerabilities found:"
              jq -r '.runs[].results[] | select(.level == "error") | "- \(.ruleId // "CVE"): \(.message.text)"' trivy-results.sarif | head -10
            fi
          else
            echo "No SARIF file generated"
          fi
      
      - name: Upload to DefectDojo
        if: always()
        run: |
          if [ -f trivy-results.sarif ]; then
            if [ -n "${{ secrets.DEFECTDOJO_URL }}" ] && [ -n "${{ secrets.DEFECTDOJO_TOKEN }}" ]; then
              echo "Uploading results to DefectDojo..."
              # Debug URL
              DEFECTDOJO_URL="${{ secrets.DEFECTDOJO_URL }}"
              echo "Debug: DefectDojo URL = '$DEFECTDOJO_URL'"
              echo "Debug: URL length = ${#DEFECTDOJO_URL}"
              
              # Clean URL (remove any whitespace)
              DEFECTDOJO_URL=$(echo "$DEFECTDOJO_URL" | tr -d '[:space:]')
              echo "Debug: Cleaned URL = '$DEFECTDOJO_URL'"
              
              # Set variables
              PRODUCT_NAME="github"
              RANDOM_SUFFIX=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 6 | head -n 1)
              ENGAGEMENT_NAME="Security Scan - $(date +%Y-%m-%d)-${RANDOM_SUFFIX}"
              
              # Test DefectDojo connectivity first
              echo "Testing DefectDojo connectivity..."
              if ! curl -s --max-time 10 --connect-timeout 5 "${DEFECTDOJO_URL}/api/v2/" \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" > /dev/null; then
                echo "ERROR: Cannot connect to DefectDojo API. Skipping upload."
                exit 0
              fi
              echo "DefectDojo API is accessible"
              
              # Upload Scan Results (import-scan creates product/engagement automatically)
              echo "Uploading scan results..."
              UPLOAD_RESPONSE=$(curl -s --max-time 120 --connect-timeout 10 -X POST "${DEFECTDOJO_URL}/api/v2/import-scan/" \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" \
                -F "scan_type=Trivy Scan" \
                -F "file=@trivy-results.sarif" \
                -F "product_name=${PRODUCT_NAME}" \
                -F "engagement_name=${ENGAGEMENT_NAME}" \
                -F "test_title=Trivy Vulnerability - ${{ github.sha }}" \
                -F "active=true" \
                -F "verified=false" \
                -F "scan_date=$(date +%Y-%m-%d)" \
                -F "tags=trivy,vulnerability,dependency,github" 2>/dev/null || echo '{"error": "Upload failed"}')
              
              echo "Debug: Upload response = $UPLOAD_RESPONSE"
              
              if echo "$UPLOAD_RESPONSE" | jq -e '.test_import' > /dev/null 2>&1; then
                echo "‚úÖ DefectDojo upload successful"
              else
                echo "‚ùå DefectDojo upload failed. Response: $UPLOAD_RESPONSE"
              fi
              
              echo "DefectDojo upload completed"
            else
              echo "DefectDojo secrets not configured - skipping upload"
            fi
          fi
      
      - name: Upload SARIF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif
          path: trivy-results.sarif
          retention-days: 30
      
      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('trivy-results.sarif')) {
              const sarif = JSON.parse(fs.readFileSync('trivy-results.sarif', 'utf8'));
              const results = sarif.runs?.[0]?.results || [];
              const highCritical = results.filter(r => r.level === 'error').length;
              const blocking = '${{ github.event.inputs.blocking || 'true' }}' === 'true';
              
              const body = `## üîç Trivy Vulnerability Scan Results
              
              **Mode**: ${blocking ? 'üö´ Blocking' : '‚ö†Ô∏è Non-blocking'}
              **Total findings**: ${results.length}
              **High/Critical**: ${highCritical}
              
              ${highCritical > 0 ? 
                `‚ö†Ô∏è High/Critical vulnerabilities detected. ${blocking ? 'Workflow will fail.' : 'Review recommended.'}` : 
                '‚úÖ No high/critical vulnerabilities found.'
              }`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }