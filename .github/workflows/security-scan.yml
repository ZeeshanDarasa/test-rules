name: Security Scan Suite

on:
  pull_request:
  pull_request_target:
  merge_group:
  push:
    branches: [ main, develop ]
  repository_dispatch:
    types: [security-scan, security-suite]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - semgrep
        - trivy
        - gitleaks
      blocking:
        description: 'Block workflow on findings'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      actions: read
      pull-requests: write
    
    strategy:
      fail-fast: ${{ github.event.inputs.blocking != 'false' }}
      matrix:
        scanner: 
          - name: semgrep
            enabled: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'semgrep' || github.event.inputs.scan_type == '' }}
          - name: trivy
            enabled: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'trivy' || github.event.inputs.scan_type == '' }}
          - name: gitleaks
            enabled: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'gitleaks' || github.event.inputs.scan_type == '' }}
    
    steps:
      - name: Checkout code
        if: matrix.scanner.enabled
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Semgrep
      - name: Install Semgrep
        if: matrix.scanner.name == 'semgrep' && matrix.scanner.enabled
        run: pip install semgrep
      
      - name: Run Semgrep
        if: matrix.scanner.name == 'semgrep' && matrix.scanner.enabled
        run: |
          BLOCKING="${{ github.event.inputs.blocking || 'true' }}"
          
          if [ "$BLOCKING" = "true" ]; then
            semgrep --config=auto --sarif --output=semgrep.sarif --no-git-ignore --error --severity=ERROR .
          else
            semgrep --config=auto --sarif --output=semgrep.sarif --no-git-ignore . || true
          fi
      
      # Trivy
      - name: Run Trivy
        if: matrix.scanner.name == 'trivy' && matrix.scanner.enabled
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          scanners: 'vuln'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          exit-code: ${{ github.event.inputs.blocking == 'false' && '0' || '1' }}
        env:
          TRIVY_OFFLINE_SCAN: false
          TRIVY_NO_PROGRESS: true
          TRIVY_SKIP_VERSION_CHECK: true
      
      # Gitleaks
      - name: Install Gitleaks
        if: matrix.scanner.name == 'gitleaks' && matrix.scanner.enabled
        run: |
          wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/
      
      - name: Run Gitleaks
        if: matrix.scanner.name == 'gitleaks' && matrix.scanner.enabled
        run: |
          BLOCKING="${{ github.event.inputs.blocking || 'true' }}"
          EXIT_CODE=$([ "$BLOCKING" = "true" ] && echo "1" || echo "0")
          
          gitleaks detect \
            --source=. \
            --report-format=sarif \
            --report-path=gitleaks-results.sarif \
            --exit-code=$EXIT_CODE \
            --verbose || [ "$BLOCKING" = "false" ]
      
      # Create empty SARIFs if needed
      - name: Create empty SARIF files
        if: always()
        run: |
          for scanner in semgrep trivy gitleaks; do
            if [ "${{ matrix.scanner.name }}" = "$scanner" ]; then
              case $scanner in
                semgrep)
                  [ ! -f semgrep.sarif ] && echo '{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Semgrep"}},"results":[]}]}' > semgrep.sarif
                  ;;
                trivy)
                  [ ! -f trivy-results.sarif ] && echo '{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Trivy"}},"results":[]}]}' > trivy-results.sarif
                  ;;
                gitleaks)
                  [ ! -f gitleaks-results.sarif ] && echo '{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Gitleaks"}},"results":[]}]}' > gitleaks-results.sarif
                  ;;
              esac
            fi
          done
      
      # Upload to DefectDojo
      - name: Upload to DefectDojo
        if: always() && vars.DEFECTDOJO_URL && secrets.DEFECTDOJO_TOKEN
        run: |
          SCANNER="${{ matrix.scanner.name }}"
          
          case $SCANNER in
            semgrep)
              FILE="semgrep.sarif"
              SCAN_TYPE="Semgrep JSON Report"
              TITLE="Semgrep SAST"
              TAGS="semgrep,sast"
              ;;
            trivy)
              FILE="trivy-results.sarif"
              SCAN_TYPE="Trivy Scan"
              TITLE="Trivy Vulnerability"
              TAGS="trivy,vulnerability"
              ;;
            gitleaks)
              FILE="gitleaks-results.sarif"
              SCAN_TYPE="Gitleaks Scan"
              TITLE="Gitleaks Secret"
              TAGS="gitleaks,secrets"
              ;;
          esac
          
          if [ -f "$FILE" ]; then
            curl -X POST "${{ vars.DEFECTDOJO_URL }}/api/v2/import-scan/" \
              -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" \
              -F "scan_type=$SCAN_TYPE" \
              -F "file=@$FILE" \
              -F "product_name=${{ github.repository }}" \
              -F "engagement_name=Security Scan - $(date +%Y-%m-%d)" \
              -F "test_title=$TITLE - ${{ github.sha }}" \
              -F "active=true" \
              -F "verified=false" \
              -F "scan_date=$(date +%Y-%m-%d)" \
              -F "tags=$TAGS,automated" || echo "DefectDojo upload failed"
          fi
      
      # Display results
      - name: Display results
        if: always()
        run: |
          SCANNER="${{ matrix.scanner.name }}"
          BLOCKING="${{ github.event.inputs.blocking || 'true' }}"
          
          echo "Scanner: $SCANNER"
          echo "Mode: $([ "$BLOCKING" = "true" ] && echo "BLOCKING" || echo "NON-BLOCKING")"
          
          case $SCANNER in
            semgrep)
              if [ -f semgrep.sarif ]; then
                FINDINGS=$(jq '[.runs[].results[]] | length' semgrep.sarif 2>/dev/null || echo "0")
                echo "Semgrep: $FINDINGS findings"
              fi
              ;;
            trivy)
              if [ -f trivy-results.sarif ]; then
                FINDINGS=$(jq '[.runs[].results[]] | length' trivy-results.sarif 2>/dev/null || echo "0")
                echo "Trivy: $FINDINGS findings"
              fi
              ;;
            gitleaks)
              if [ -f gitleaks-results.sarif ]; then
                FINDINGS=$(jq '[.runs[].results[]] | length' gitleaks-results.sarif 2>/dev/null || echo "0")
                echo "Gitleaks: $FINDINGS findings"
              fi
              ;;
          esac
      
      # Archive results
      - name: Upload SARIF artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.scanner.name }}-sarif
          path: "*.sarif"
          retention-days: 30

  # Summary job
  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: security-scan
    if: always()
    
    permissions:
      pull-requests: write
      
    steps:
      - name: Create summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const result = '${{ needs.security-scan.result }}';
            const blocking = '${{ github.event.inputs.blocking || 'true' }}' === 'true';
            
            let summary = '## üîí Security Scan Suite Results\n\n';
            summary += `**Mode**: ${blocking ? 'üö´ Blocking' : '‚ö†Ô∏è Non-blocking'}\n`;
            summary += `**Status**: ${result === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}\n\n`;
            
            if (result !== 'success') {
              summary += blocking ? 
                '‚ùå **Security issues found - merge blocked until resolved**\n\n' :
                '‚ö†Ô∏è **Security issues found - review recommended**\n\n';
            } else {
              summary += '‚úÖ **No critical security issues detected**\n\n';
            }
            
            summary += 'View detailed results in individual workflow runs above.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });